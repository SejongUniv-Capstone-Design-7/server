name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: capstone-s3
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    # Ignore yml 파일 추가
    - name: Copy prod secret
      env:
        PROD_SECRET: ${{ secrets.PROD_SECRET }}
        PROD_SECRET_DIR: src/main/resources
        PROD_SECRET_DIR_FILE_NAME: application-prod.yml
      run: echo $PROD_SECRET | base64 --decode >> $PROD_SECRET_DIR/$PROD_SECRET_DIR_FILE_NAME
        
    - name: Copy security secret
      env:
        SECURITY_SECRET: ${{ secrets.SECURITY_SECRET }}
        SECURITY_SECRET_DIR: src/main/resources
        SECURITY_SECRET_DIR_FILE_NAME: application-security.yml
      run: echo $SECURITY_SECRET | base64 --decode >> $SECURITY_SECRET_DIR/$SECURITY_SECRET_DIR_FILE_NAME

    # Error Gradle Script ‘/Home/Runner/Work/*/Gradlew’ Is Not Executable 에러 해결
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    # (3) Gradle build (Test 제외)
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: clean build -x test

    # spring 이미지 빌드 및 도커허브에 push
    - name: spring docker build and push
      run : |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}

    # 서버에 접속하여 도커 이미지를 pull 받고 실행하기
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: 22
        script: |
          docker stop $(docker ps -a -q) 
          docker rm $(docker ps -a -q) 
          docker pull ${{ secrets.DOCKER_REPO }}
          docker run -d -p 8080:8080 --name spring-container ${{ secrets.DOCKER_REPO }}
      
